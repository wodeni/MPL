type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | APPLY
  | MATAPP
  | TRANS
  | EMULT
  | EDIV
  | RETURN
  | VOID
  | IF
  | ELSE
  | ELSEIF
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | NULL
  | NEW
  | FUNC
  | CENTER
  | NORTH
  | SOUTH
  | WEST
  | EAST
  | NWEST
  | NEAST
  | SWEST
  | SEAST
  | IMG
  | MAT
  | FMAT
  | NUMLIT of (Ast.num)
  | ID of (string)
  | STRLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(*
 * File: parser.mly
 * Date: 2017-03-11
 *
 * PLT Spring 2017
 * MPL Project
 * Wode "Nimo" Ni    <wn2155@columbia.edu>
 * David Rincon-Cruz <dr2884@columbia.edu>
 * Chi Zhang         <cz2440@columbia.edu>
 * Jiangfeng Wang    <jw3107@columbia.edu>
 *)
open Ast
# 76 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* COMMA *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* AND *);
  280 (* OR *);
  281 (* APPLY *);
  282 (* MATAPP *);
  283 (* TRANS *);
  284 (* EMULT *);
  285 (* EDIV *);
  286 (* RETURN *);
  287 (* VOID *);
  288 (* IF *);
  289 (* ELSE *);
  290 (* ELSEIF *);
  291 (* WHILE *);
  292 (* INT *);
  293 (* BOOL *);
  294 (* FLOAT *);
  295 (* NULL *);
  296 (* NEW *);
  297 (* FUNC *);
  298 (* CENTER *);
  299 (* NORTH *);
  300 (* SOUTH *);
  301 (* WEST *);
  302 (* EAST *);
  303 (* NWEST *);
  304 (* NEAST *);
  305 (* SWEST *);
  306 (* SEAST *);
  307 (* IMG *);
  308 (* MAT *);
  309 (* FMAT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  310 (* NUMLIT *);
  311 (* ID *);
  312 (* STRLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\004\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\005\000\005\000\008\000\006\000\
\006\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\011\000\011\000\013\000\
\013\000\014\000\012\000\012\000\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\006\000\001\000\001\000\001\000\001\000\
\001\000\010\000\010\000\001\000\000\000\002\000\003\000\000\000\
\002\000\002\000\002\000\003\000\003\000\005\000\007\000\005\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\003\000\004\000\003\000\003\000\006\000\000\000\001\000\001\000\
\003\000\001\000\001\000\003\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\063\000\000\000\009\000\006\000\007\000\008\000\
\012\000\000\000\000\000\001\000\003\000\000\000\005\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\016\000\004\000\000\000\000\000\000\000\026\000\027\000\
\000\000\000\000\000\000\029\000\025\000\000\000\030\000\017\000\
\000\000\000\000\000\000\015\000\000\000\000\000\058\000\000\000\
\061\000\000\000\047\000\048\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\021\000\
\000\000\052\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\034\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\000\
\000\000\050\000\000\000\000\000\010\000\011\000\000\000\024\000\
\000\000\000\000\000\000\053\000\023\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\014\000\024\000\028\000\015\000\029\000\
\048\000\049\000\096\000\056\000\097\000\057\000\058\000"

let yysindex = "\005\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\241\254\253\254\000\000\000\000\223\254\000\000\150\001\
\150\001\031\255\034\255\037\255\000\000\055\255\063\255\150\001\
\024\255\028\255\048\255\066\255\000\000\099\255\103\255\111\255\
\244\255\000\000\000\000\064\255\244\255\244\255\000\000\000\000\
\053\255\122\255\123\255\000\000\000\000\060\255\000\000\000\000\
\127\000\132\255\146\255\000\000\000\255\109\255\000\000\006\255\
\000\000\149\255\000\000\000\000\000\000\148\000\244\255\244\255\
\244\255\244\255\244\255\000\000\244\255\244\255\244\255\244\255\
\244\255\244\255\244\255\244\255\244\255\244\255\244\255\244\255\
\244\255\244\255\244\255\244\255\104\255\108\255\000\000\000\000\
\064\255\000\000\064\255\000\000\003\001\027\001\217\001\150\255\
\164\255\196\001\217\001\074\255\074\255\000\000\000\000\003\002\
\003\002\015\002\015\002\015\002\015\002\238\001\117\255\159\255\
\159\255\159\255\159\255\166\255\167\255\149\255\000\000\208\255\
\208\255\000\000\244\255\244\255\000\000\000\000\143\255\000\000\
\217\001\154\001\208\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\145\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\255\000\000\000\000\000\000\000\000\000\000\000\000\
\175\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\255\000\000\
\176\255\000\000\153\255\077\000\106\000\000\000\000\000\218\255\
\152\001\056\001\080\001\104\001\128\001\076\255\057\255\252\255\
\177\000\206\000\235\000\000\000\000\000\088\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\181\255\000\000\
\094\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\157\000\000\000\154\000\100\000\000\000\
\229\255\223\255\000\000\000\000\000\000\091\000\101\000"

let yytablesize = 812
let yytable = "\053\000\
\012\000\016\000\087\000\059\000\060\000\001\000\089\000\062\000\
\069\000\070\000\071\000\072\000\090\000\017\000\073\000\074\000\
\075\000\076\000\077\000\078\000\059\000\018\000\079\000\080\000\
\081\000\082\000\059\000\083\000\084\000\093\000\094\000\095\000\
\098\000\099\000\021\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\056\000\022\000\061\000\033\000\023\000\
\056\000\042\000\036\000\042\000\025\000\065\000\037\000\042\000\
\042\000\066\000\038\000\033\000\026\000\034\000\035\000\036\000\
\067\000\039\000\040\000\037\000\041\000\030\000\041\000\038\000\
\042\000\031\000\041\000\041\000\071\000\072\000\039\000\040\000\
\060\000\129\000\130\000\044\000\127\000\128\000\060\000\041\000\
\057\000\042\000\041\000\041\000\043\000\057\000\032\000\133\000\
\044\000\050\000\045\000\046\000\047\000\051\000\033\000\052\000\
\034\000\088\000\036\000\019\000\020\000\055\000\037\000\045\000\
\046\000\047\000\038\000\063\000\064\000\069\000\070\000\071\000\
\072\000\039\000\040\000\073\000\074\000\075\000\076\000\077\000\
\078\000\085\000\041\000\079\000\042\000\081\000\082\000\043\000\
\083\000\084\000\016\000\044\000\016\000\016\000\016\000\086\000\
\122\000\049\000\016\000\049\000\091\000\116\000\016\000\049\000\
\049\000\117\000\045\000\046\000\047\000\016\000\016\000\069\000\
\070\000\071\000\072\000\123\000\125\000\126\000\016\000\131\000\
\016\000\054\000\055\000\016\000\027\000\119\000\022\000\016\000\
\022\000\022\000\022\000\054\000\000\000\118\000\022\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\016\000\016\000\
\016\000\022\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\022\000\034\000\022\000\036\000\000\000\022\000\
\000\000\037\000\035\000\022\000\035\000\038\000\000\000\000\000\
\035\000\035\000\000\000\000\000\039\000\040\000\000\000\000\000\
\035\000\035\000\022\000\022\000\022\000\041\000\000\000\042\000\
\035\000\035\000\043\000\000\000\000\000\033\000\044\000\000\000\
\000\000\036\000\000\000\000\000\043\000\037\000\043\000\000\000\
\000\000\038\000\043\000\043\000\000\000\045\000\046\000\047\000\
\039\000\040\000\043\000\043\000\043\000\043\000\043\000\043\000\
\000\000\000\000\043\000\043\000\043\000\043\000\000\000\043\000\
\043\000\000\000\044\000\000\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\000\000\006\000\007\000\008\000\000\000\
\000\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\
\028\000\000\000\028\000\009\000\010\000\011\000\028\000\028\000\
\028\000\028\000\028\000\028\000\000\000\000\000\028\000\028\000\
\028\000\028\000\028\000\028\000\000\000\000\000\028\000\028\000\
\028\000\028\000\000\000\028\000\028\000\031\000\000\000\031\000\
\000\000\000\000\000\000\031\000\031\000\031\000\031\000\000\000\
\000\000\000\000\000\000\031\000\031\000\031\000\031\000\031\000\
\031\000\000\000\000\000\031\000\031\000\031\000\031\000\000\000\
\031\000\031\000\032\000\000\000\032\000\000\000\000\000\000\000\
\032\000\032\000\032\000\032\000\000\000\000\000\000\000\000\000\
\032\000\032\000\032\000\032\000\032\000\032\000\000\000\068\000\
\032\000\032\000\032\000\032\000\000\000\032\000\032\000\069\000\
\070\000\071\000\072\000\000\000\000\000\073\000\074\000\075\000\
\076\000\077\000\078\000\000\000\092\000\079\000\080\000\081\000\
\082\000\000\000\083\000\084\000\069\000\070\000\071\000\072\000\
\000\000\000\000\073\000\074\000\075\000\076\000\077\000\078\000\
\000\000\000\000\079\000\080\000\081\000\082\000\000\000\083\000\
\084\000\044\000\000\000\044\000\000\000\000\000\000\000\044\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\000\000\000\000\044\000\
\044\000\044\000\044\000\000\000\044\000\044\000\045\000\000\000\
\045\000\000\000\000\000\000\000\045\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\000\000\045\000\045\000\045\000\045\000\
\000\000\045\000\045\000\046\000\000\000\046\000\000\000\000\000\
\000\000\046\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\000\000\046\000\046\000\046\000\046\000\120\000\046\000\046\000\
\000\000\000\000\000\000\069\000\070\000\071\000\072\000\000\000\
\000\000\073\000\074\000\075\000\076\000\077\000\078\000\000\000\
\000\000\079\000\080\000\081\000\082\000\121\000\083\000\084\000\
\000\000\000\000\000\000\069\000\070\000\071\000\072\000\000\000\
\000\000\073\000\074\000\075\000\076\000\077\000\078\000\000\000\
\000\000\079\000\080\000\081\000\082\000\000\000\083\000\084\000\
\037\000\000\000\037\000\000\000\000\000\000\000\037\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\037\000\
\037\000\037\000\037\000\037\000\000\000\000\000\037\000\037\000\
\038\000\000\000\038\000\000\000\000\000\000\000\038\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\000\000\038\000\038\000\
\039\000\000\000\039\000\000\000\000\000\000\000\039\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\039\000\
\039\000\039\000\039\000\039\000\000\000\000\000\039\000\039\000\
\040\000\000\000\040\000\000\000\000\000\000\000\040\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\
\040\000\040\000\040\000\040\000\000\000\000\000\040\000\040\000\
\036\000\000\000\036\000\000\000\000\000\000\000\036\000\036\000\
\132\000\000\000\069\000\070\000\071\000\072\000\036\000\036\000\
\073\000\074\000\075\000\076\000\077\000\078\000\036\000\036\000\
\079\000\080\000\081\000\082\000\005\000\083\000\084\000\000\000\
\000\000\006\000\007\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\010\000\011\000\124\000\069\000\070\000\071\000\072\000\
\000\000\000\000\073\000\074\000\075\000\076\000\077\000\078\000\
\000\000\000\000\079\000\080\000\081\000\082\000\000\000\083\000\
\084\000\069\000\070\000\071\000\072\000\000\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\000\000\079\000\
\080\000\081\000\082\000\000\000\083\000\084\000\069\000\070\000\
\071\000\072\000\000\000\000\000\073\000\074\000\075\000\076\000\
\077\000\078\000\000\000\000\000\000\000\000\000\081\000\082\000\
\000\000\083\000\084\000\069\000\070\000\071\000\072\000\000\000\
\000\000\000\000\000\000\075\000\076\000\077\000\078\000\069\000\
\070\000\071\000\072\000\081\000\082\000\000\000\083\000\084\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
\082\000\000\000\083\000\084\000"

let yycheck = "\033\000\
\000\000\017\001\003\001\037\000\038\000\001\000\001\001\041\000\
\009\001\010\001\011\001\012\001\007\001\017\001\015\001\016\001\
\017\001\018\001\019\001\020\001\001\001\055\001\023\001\024\001\
\025\001\026\001\007\001\028\001\029\001\063\000\064\000\065\000\
\066\000\067\000\004\001\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\003\001\019\001\001\001\002\001\019\001\
\008\001\001\001\006\001\003\001\006\001\002\001\010\001\007\001\
\008\001\006\001\014\001\002\001\006\001\004\001\005\001\006\001\
\013\001\021\001\022\001\010\001\001\001\054\001\003\001\014\001\
\024\001\054\001\007\001\008\001\011\001\012\001\021\001\022\001\
\001\001\123\000\124\000\039\001\120\000\121\000\007\001\030\001\
\003\001\032\001\023\001\024\001\035\001\008\001\055\001\131\000\
\039\001\007\001\054\001\055\001\056\001\007\001\002\001\001\001\
\004\001\005\001\006\001\016\000\017\000\054\001\010\001\054\001\
\055\001\056\001\014\001\002\001\002\001\009\001\010\001\011\001\
\012\001\021\001\022\001\015\001\016\001\017\001\018\001\019\001\
\020\001\006\001\030\001\023\001\032\001\025\001\026\001\035\001\
\028\001\029\001\002\001\039\001\004\001\005\001\006\001\006\001\
\003\001\001\001\010\001\003\001\008\001\054\001\014\001\007\001\
\008\001\054\001\054\001\055\001\056\001\021\001\022\001\009\001\
\010\001\011\001\012\001\008\001\007\001\007\001\030\001\033\001\
\032\001\003\001\003\001\035\001\024\000\091\000\002\001\039\001\
\004\001\005\001\006\001\034\000\255\255\089\000\010\001\255\255\
\255\255\255\255\014\001\255\255\255\255\255\255\054\001\055\001\
\056\001\021\001\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\002\001\030\001\004\001\032\001\006\001\255\255\035\001\
\255\255\010\001\001\001\039\001\003\001\014\001\255\255\255\255\
\007\001\008\001\255\255\255\255\021\001\022\001\255\255\255\255\
\015\001\016\001\054\001\055\001\056\001\030\001\255\255\032\001\
\023\001\024\001\035\001\255\255\255\255\002\001\039\001\255\255\
\255\255\006\001\255\255\255\255\001\001\010\001\003\001\255\255\
\255\255\014\001\007\001\008\001\255\255\054\001\055\001\056\001\
\021\001\022\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\255\255\028\001\
\029\001\255\255\039\001\255\255\255\255\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\255\255\
\255\255\054\001\055\001\056\001\255\255\255\255\255\255\255\255\
\001\001\255\255\003\001\051\001\052\001\053\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\025\001\026\001\255\255\028\001\029\001\001\001\255\255\003\001\
\255\255\255\255\255\255\007\001\008\001\009\001\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\255\255\
\028\001\029\001\001\001\255\255\003\001\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\001\001\
\023\001\024\001\025\001\026\001\255\255\028\001\029\001\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\001\001\023\001\024\001\025\001\
\026\001\255\255\028\001\029\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\255\255\028\001\
\029\001\001\001\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\001\001\255\255\
\003\001\255\255\255\255\255\255\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\255\255\028\001\029\001\001\001\255\255\003\001\255\255\255\255\
\255\255\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\003\001\028\001\029\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\003\001\028\001\029\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\255\255\028\001\029\001\
\001\001\255\255\003\001\255\255\255\255\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\001\001\255\255\003\001\255\255\255\255\255\255\007\001\008\001\
\007\001\255\255\009\001\010\001\011\001\012\001\015\001\016\001\
\015\001\016\001\017\001\018\001\019\001\020\001\023\001\024\001\
\023\001\024\001\025\001\026\001\031\001\028\001\029\001\255\255\
\255\255\036\001\037\001\038\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\051\001\052\001\053\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\255\255\028\001\
\029\001\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\009\001\
\010\001\011\001\012\001\025\001\026\001\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\255\255\028\001\029\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  APPLY\000\
  MATAPP\000\
  TRANS\000\
  EMULT\000\
  EDIV\000\
  RETURN\000\
  VOID\000\
  IF\000\
  ELSE\000\
  ELSEIF\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  NULL\000\
  NEW\000\
  FUNC\000\
  CENTER\000\
  NORTH\000\
  SOUTH\000\
  WEST\000\
  EAST\000\
  NWEST\000\
  NEAST\000\
  SWEST\000\
  SEAST\000\
  IMG\000\
  MAT\000\
  FMAT\000\
  EOF\000\
  "

let yynames_block = "\
  NUMLIT\000\
  ID\000\
  STRLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 46 "parser.mly"
              ( _1 )
# 504 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                       ( [])
# 510 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 51 "parser.mly"
                       ( _2 :: _1 )
# 518 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 55 "parser.mly"
    ( { typ = _1; fname = _2;
      locals = List.rev _4; body = List.rev _5 } )
# 529 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primitives) in
    Obj.repr(
# 59 "parser.mly"
             ( Typ(_1) )
# 536 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
        ( Int )
# 542 "parser.ml"
               : 'primitives))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
         ( Bool )
# 548 "parser.ml"
               : 'primitives))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
          ( Float )
# 554 "parser.ml"
               : 'primitives))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
         ( Void )
# 560 "parser.ml"
               : 'primitives))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'primitives) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : Ast.num) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Ast.num) in
    Obj.repr(
# 66 "parser.mly"
                                                                           ( Mat(_3, _6, _9) )
# 569 "parser.ml"
               : 'primitives))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'primitives) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : Ast.num) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Ast.num) in
    Obj.repr(
# 67 "parser.mly"
                                                                            ( FMat(_3, _6, _9) )
# 578 "parser.ml"
               : 'primitives))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
        ( Img )
# 584 "parser.ml"
               : 'primitives))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                     ( [] )
# 590 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 72 "parser.mly"
                     ( _2 :: _1 )
# 598 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 75 "parser.mly"
              ( Local(_1, _2) )
# 606 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                   ( [] )
# 612 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "parser.mly"
                   ( _2 :: _1 )
# 620 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
              ( Expr _1 )
# 627 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                ( Return Noexpr )
# 633 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                     ( Return _2 )
# 640 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 85 "parser.mly"
                            ( Block(List.rev _2) )
# 647 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 86 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 655 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 87 "parser.mly"
                                            ( If(_3, _5, _7) )
# 664 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                                  ( While(_3, _5) )
# 672 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.num) in
    Obj.repr(
# 91 "parser.mly"
                     ( NumLit(_1) )
# 679 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                     ( BoolLit(true) )
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                     ( BoolLit(false) )
# 691 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                     ( Id(_1) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                     ( Null )
# 704 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "parser.mly"
                     ( StrLit(_1) )
# 711 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 719 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 727 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 735 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 743 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 751 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 775 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 783 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 791 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 799 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 807 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Apply, _3) )
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Matapp, _3) )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Emult,  _3) )
# 831 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Ediv,   _3) )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                         ( Unop(Neg, _2) )
# 846 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Unop(Not, _2) )
# 853 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Assign(_1, _3) )
# 861 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 116 "parser.mly"
                                 ( Call(_1, _3) )
# 869 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                       ( _2 )
# 876 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mat_lit) in
    Obj.repr(
# 118 "parser.mly"
                                              ( MatrixLit(_2) )
# 883 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                                              ( MatrixAccess(_1, _3, _5) )
# 892 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
                                    ( [] )
# 898 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 127 "parser.mly"
                                    ( List.rev _1 )
# 905 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                                    ( [_1] )
# 912 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                    ( _3 :: _1 )
# 920 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.num) in
    Obj.repr(
# 134 "parser.mly"
                                    ( _1 )
# 927 "parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit_list) in
    Obj.repr(
# 137 "parser.mly"
                                    ( [_1] )
# 934 "parser.ml"
               : 'mat_lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mat_lit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lit_list) in
    Obj.repr(
# 138 "parser.mly"
                                    ( _3 :: _1 )
# 942 "parser.ml"
               : 'mat_lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit) in
    Obj.repr(
# 141 "parser.mly"
                                    ( [_1] )
# 949 "parser.ml"
               : 'lit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lit_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lit) in
    Obj.repr(
# 142 "parser.mly"
                                    ( _3 :: _1 )
# 957 "parser.ml"
               : 'lit_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)

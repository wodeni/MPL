type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | APPLY
  | MATAPP
  | TRANS
  | EMULT
  | EDIV
  | RETURN
  | VOID
  | IF
  | ELSE
  | ELSEIF
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | STRING
  | NULL
  | NEW
  | FUNC
  | CENTER
  | NORTH
  | SOUTH
  | WEST
  | EAST
  | NWEST
  | NEAST
  | SWEST
  | SEAST
  | IMG
  | MAT
  | FMAT
  | INTLIT of (int)
  | FLOATLIT of (float)
  | ID of (string)
  | STRLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(*
 * File: parser.mly
 * Date: 2017-03-11
 *
 * PLT Spring 2017
 * MPL Project
 * Wode "Nimo" Ni    <wn2155@columbia.edu>
 * David Rincon-Cruz <dr2884@columbia.edu>
 * Chi Zhang         <cz2440@columbia.edu>
 * Jiangfeng Wang    <jw3107@columbia.edu>
 *)
open Ast
# 78 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* COMMA *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* AND *);
  280 (* OR *);
  281 (* APPLY *);
  282 (* MATAPP *);
  283 (* TRANS *);
  284 (* EMULT *);
  285 (* EDIV *);
  286 (* RETURN *);
  287 (* VOID *);
  288 (* IF *);
  289 (* ELSE *);
  290 (* ELSEIF *);
  291 (* WHILE *);
  292 (* INT *);
  293 (* BOOL *);
  294 (* FLOAT *);
  295 (* STRING *);
  296 (* NULL *);
  297 (* NEW *);
  298 (* FUNC *);
  299 (* CENTER *);
  300 (* NORTH *);
  301 (* SOUTH *);
  302 (* WEST *);
  303 (* EAST *);
  304 (* NWEST *);
  305 (* NEAST *);
  306 (* SWEST *);
  307 (* SEAST *);
  308 (* IMG *);
  309 (* MAT *);
  310 (* FMAT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  311 (* INTLIT *);
  312 (* FLOATLIT *);
  313 (* ID *);
  314 (* STRLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\005\000\005\000\008\000\008\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\006\000\006\000\009\000\007\000\007\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\012\000\012\000\014\000\014\000\015\000\
\015\000\015\000\013\000\013\000\016\000\016\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\009\000\000\000\001\000\002\000\004\000\
\001\000\001\000\001\000\001\000\001\000\010\000\010\000\001\000\
\000\000\002\000\003\000\000\000\002\000\002\000\002\000\003\000\
\003\000\005\000\007\000\005\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\004\000\
\003\000\003\000\007\000\000\000\001\000\001\000\003\000\001\000\
\001\000\001\000\001\000\003\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\079\000\000\000\013\000\009\000\010\000\011\000\
\012\000\016\000\000\000\000\000\001\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\020\000\004\000\000\000\000\000\000\000\031\000\032\000\000\000\
\000\000\000\000\034\000\036\000\039\000\040\000\038\000\037\000\
\041\000\042\000\043\000\044\000\029\000\030\000\000\000\035\000\
\021\000\000\000\014\000\015\000\019\000\000\000\000\000\072\000\
\073\000\074\000\000\000\077\000\000\000\061\000\062\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\025\000\000\000\066\000\000\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\078\000\000\000\000\000\
\064\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\027\000\067\000"

let yydgoto = "\002\000\
\003\000\004\000\014\000\015\000\025\000\038\000\043\000\026\000\
\044\000\073\000\074\000\121\000\083\000\122\000\084\000\085\000"

let yysindex = "\009\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\255\024\255\000\000\000\000\010\255\243\001\
\243\001\066\255\053\255\063\255\243\001\077\255\078\255\036\255\
\091\255\089\255\045\255\047\255\000\000\112\255\243\001\110\255\
\111\255\000\000\067\255\122\255\123\255\243\001\000\000\075\255\
\081\255\076\255\121\255\000\000\130\255\133\255\140\255\213\000\
\000\000\000\000\238\254\213\000\213\000\000\000\000\000\064\255\
\142\255\143\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\034\255\000\000\
\000\000\008\001\000\000\000\000\000\000\169\001\178\255\000\000\
\000\000\000\000\005\255\000\000\141\255\000\000\000\000\000\000\
\029\001\213\000\213\000\213\000\213\000\213\000\000\000\213\000\
\213\000\213\000\213\000\213\000\213\000\213\000\213\000\213\000\
\213\000\213\000\213\000\213\000\213\000\213\000\213\000\000\000\
\000\000\238\254\000\000\238\254\000\000\193\001\217\001\079\002\
\145\255\144\255\035\002\079\002\008\255\008\255\000\000\000\000\
\121\002\121\002\133\002\133\002\133\002\133\002\100\002\164\000\
\148\255\148\255\148\255\148\255\141\255\000\000\156\000\156\000\
\000\000\213\000\156\255\117\255\000\000\079\002\213\000\156\000\
\058\002\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\160\255\000\000\000\000\000\000\
\000\000\170\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\255\000\000\000\000\000\000\
\000\000\000\000\000\000\171\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\255\
\000\000\172\255\000\000\098\255\236\255\221\000\000\000\000\000\
\131\255\188\255\072\255\010\000\246\001\014\002\072\000\059\000\
\058\001\087\001\116\001\145\001\070\255\000\000\000\000\000\000\
\000\000\000\000\000\000\099\000\000\000\073\255\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\094\001\000\000\000\000\132\000\000\000\
\000\000\115\255\208\255\000\000\000\000\000\000\069\000\073\000"

let yytablesize = 930
let yytable = "\078\000\
\013\000\148\000\149\000\086\000\087\000\114\000\033\000\089\000\
\033\000\001\000\154\000\115\000\033\000\033\000\033\000\033\000\
\033\000\033\000\098\000\099\000\033\000\033\000\033\000\033\000\
\033\000\033\000\075\000\016\000\033\000\033\000\033\000\033\000\
\075\000\033\000\033\000\092\000\080\000\081\000\082\000\093\000\
\017\000\118\000\119\000\120\000\123\000\124\000\094\000\125\000\
\126\000\127\000\128\000\129\000\130\000\131\000\132\000\133\000\
\134\000\135\000\136\000\137\000\138\000\139\000\140\000\070\000\
\088\000\048\000\018\000\021\000\070\000\051\000\076\000\022\000\
\051\000\052\000\051\000\071\000\076\000\053\000\051\000\051\000\
\071\000\023\000\027\000\028\000\054\000\055\000\051\000\051\000\
\051\000\051\000\051\000\051\000\029\000\030\000\051\000\051\000\
\031\000\150\000\063\000\032\000\063\000\033\000\153\000\059\000\
\063\000\063\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\034\000\036\000\037\000\069\000\070\000\
\071\000\072\000\048\000\039\000\049\000\050\000\051\000\040\000\
\041\000\045\000\052\000\049\000\047\000\049\000\053\000\046\000\
\075\000\049\000\049\000\076\000\077\000\054\000\055\000\090\000\
\091\000\049\000\049\000\145\000\116\000\152\000\056\000\146\000\
\057\000\049\000\049\000\058\000\096\000\097\000\098\000\099\000\
\059\000\151\000\005\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\006\000\068\000\069\000\069\000\
\070\000\071\000\072\000\048\000\079\000\049\000\113\000\051\000\
\142\000\000\000\141\000\052\000\050\000\000\000\050\000\053\000\
\000\000\000\000\050\000\050\000\000\000\000\000\054\000\055\000\
\000\000\000\000\050\000\050\000\000\000\000\000\000\000\056\000\
\000\000\057\000\050\000\050\000\058\000\000\000\000\000\000\000\
\000\000\059\000\000\000\000\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\000\000\000\000\000\000\
\069\000\070\000\071\000\072\000\045\000\000\000\045\000\000\000\
\000\000\000\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\000\000\000\000\045\000\045\000\045\000\045\000\000\000\045\000\
\045\000\000\000\052\000\000\000\052\000\000\000\000\000\000\000\
\052\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\052\000\052\000\052\000\052\000\052\000\000\000\005\000\
\052\000\052\000\000\000\000\000\006\000\007\000\008\000\009\000\
\000\000\000\000\000\000\020\000\000\000\020\000\020\000\020\000\
\000\000\000\000\000\000\020\000\010\000\011\000\012\000\020\000\
\000\000\000\000\000\000\056\000\000\000\056\000\020\000\020\000\
\000\000\056\000\056\000\000\000\000\000\000\000\000\000\020\000\
\055\000\020\000\055\000\000\000\020\000\000\000\055\000\055\000\
\000\000\020\000\056\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\000\000\055\000\055\000\
\020\000\020\000\020\000\020\000\026\000\000\000\026\000\026\000\
\026\000\000\000\000\000\000\000\026\000\019\000\020\000\000\000\
\026\000\000\000\024\000\000\000\000\000\000\000\000\000\026\000\
\026\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\026\000\000\000\026\000\042\000\000\000\026\000\000\000\000\000\
\000\000\000\000\026\000\000\000\000\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\000\000\000\000\
\000\000\026\000\026\000\026\000\026\000\048\000\000\000\049\000\
\000\000\051\000\000\000\000\000\000\000\052\000\000\000\000\000\
\000\000\053\000\000\000\000\000\096\000\097\000\098\000\099\000\
\054\000\055\000\100\000\101\000\102\000\103\000\104\000\105\000\
\000\000\056\000\106\000\057\000\108\000\109\000\058\000\110\000\
\111\000\000\000\000\000\059\000\000\000\000\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\000\000\
\000\000\000\000\069\000\070\000\071\000\072\000\048\000\000\000\
\000\000\000\000\051\000\000\000\000\000\046\000\052\000\046\000\
\000\000\000\000\053\000\046\000\046\000\046\000\046\000\000\000\
\000\000\054\000\055\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\000\000\046\000\046\000\046\000\046\000\000\000\
\046\000\046\000\000\000\000\000\059\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\095\000\000\000\000\000\069\000\070\000\071\000\072\000\000\000\
\096\000\097\000\098\000\099\000\000\000\000\000\100\000\101\000\
\102\000\103\000\104\000\105\000\000\000\117\000\106\000\107\000\
\108\000\109\000\000\000\110\000\111\000\096\000\097\000\098\000\
\099\000\000\000\000\000\100\000\101\000\102\000\103\000\104\000\
\105\000\000\000\000\000\106\000\107\000\108\000\109\000\000\000\
\110\000\111\000\057\000\000\000\057\000\000\000\000\000\000\000\
\057\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\000\057\000\057\000\057\000\057\000\057\000\000\000\000\000\
\057\000\057\000\057\000\057\000\000\000\057\000\057\000\058\000\
\000\000\058\000\000\000\000\000\000\000\058\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\058\000\058\000\
\058\000\058\000\058\000\000\000\000\000\058\000\058\000\058\000\
\058\000\000\000\058\000\058\000\059\000\000\000\059\000\000\000\
\000\000\000\000\059\000\059\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\059\000\059\000\059\000\059\000\059\000\
\000\000\000\000\059\000\059\000\059\000\059\000\000\000\059\000\
\059\000\060\000\000\000\060\000\000\000\000\000\000\000\060\000\
\060\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\060\000\060\000\060\000\060\000\060\000\000\000\000\000\060\000\
\060\000\060\000\060\000\112\000\060\000\060\000\000\000\000\000\
\000\000\096\000\097\000\098\000\099\000\000\000\000\000\100\000\
\101\000\102\000\103\000\104\000\105\000\000\000\000\000\106\000\
\107\000\108\000\109\000\143\000\110\000\111\000\000\000\000\000\
\000\000\096\000\097\000\098\000\099\000\000\000\000\000\100\000\
\101\000\102\000\103\000\104\000\105\000\000\000\000\000\106\000\
\107\000\108\000\109\000\144\000\110\000\111\000\000\000\000\000\
\000\000\096\000\097\000\098\000\099\000\000\000\000\000\100\000\
\101\000\102\000\103\000\104\000\105\000\000\000\000\000\106\000\
\107\000\108\000\109\000\000\000\110\000\111\000\053\000\000\000\
\053\000\000\000\000\000\000\000\053\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\053\000\053\000\053\000\
\053\000\053\000\000\000\000\000\053\000\053\000\054\000\000\000\
\054\000\005\000\000\000\000\000\054\000\054\000\006\000\007\000\
\008\000\009\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\000\000\054\000\054\000\010\000\011\000\
\012\000\147\000\000\000\096\000\097\000\098\000\099\000\000\000\
\000\000\100\000\101\000\102\000\103\000\104\000\105\000\000\000\
\000\000\106\000\107\000\108\000\109\000\000\000\110\000\111\000\
\155\000\000\000\096\000\097\000\098\000\099\000\000\000\000\000\
\100\000\101\000\102\000\103\000\104\000\105\000\000\000\000\000\
\106\000\107\000\108\000\109\000\000\000\110\000\111\000\096\000\
\097\000\098\000\099\000\000\000\000\000\100\000\101\000\102\000\
\103\000\104\000\105\000\000\000\000\000\106\000\107\000\108\000\
\109\000\000\000\110\000\111\000\096\000\097\000\098\000\099\000\
\000\000\000\000\100\000\101\000\102\000\103\000\104\000\105\000\
\000\000\000\000\000\000\000\000\108\000\109\000\000\000\110\000\
\111\000\096\000\097\000\098\000\099\000\000\000\000\000\000\000\
\000\000\102\000\103\000\104\000\105\000\096\000\097\000\098\000\
\099\000\108\000\109\000\000\000\110\000\111\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\000\109\000\000\000\
\110\000\111\000"

let yycheck = "\048\000\
\000\000\143\000\144\000\052\000\053\000\001\001\001\001\056\000\
\003\001\001\000\152\000\007\001\007\001\008\001\009\001\010\001\
\011\001\012\001\011\001\012\001\015\001\016\001\017\001\018\001\
\019\001\020\001\001\001\017\001\023\001\024\001\025\001\026\001\
\007\001\028\001\029\001\002\001\055\001\056\001\057\001\006\001\
\017\001\090\000\091\000\092\000\093\000\094\000\013\001\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\003\001\
\001\001\002\001\057\001\002\001\008\001\006\001\001\001\019\001\
\001\001\010\001\003\001\003\001\007\001\014\001\007\001\008\001\
\008\001\019\001\006\001\006\001\021\001\022\001\015\001\016\001\
\017\001\018\001\019\001\020\001\057\001\003\001\023\001\024\001\
\008\001\146\000\001\001\055\001\003\001\055\001\151\000\040\001\
\007\001\008\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\004\001\007\001\007\001\055\001\056\001\
\057\001\058\001\002\001\057\001\004\001\005\001\006\001\006\001\
\006\001\055\001\010\001\001\001\057\001\003\001\014\001\055\001\
\007\001\007\001\008\001\007\001\001\001\021\001\022\001\002\001\
\002\001\015\001\016\001\003\001\008\001\033\001\030\001\008\001\
\032\001\023\001\024\001\035\001\009\001\010\001\011\001\012\001\
\040\001\006\001\003\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\003\001\003\001\003\001\055\001\
\056\001\057\001\058\001\002\001\049\000\004\001\005\001\006\001\
\116\000\255\255\114\000\010\001\001\001\255\255\003\001\014\001\
\255\255\255\255\007\001\008\001\255\255\255\255\021\001\022\001\
\255\255\255\255\015\001\016\001\255\255\255\255\255\255\030\001\
\255\255\032\001\023\001\024\001\035\001\255\255\255\255\255\255\
\255\255\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\255\255\255\255\255\255\
\055\001\056\001\057\001\058\001\001\001\255\255\003\001\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\255\255\028\001\
\029\001\255\255\001\001\255\255\003\001\255\255\255\255\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\031\001\
\023\001\024\001\255\255\255\255\036\001\037\001\038\001\039\001\
\255\255\255\255\255\255\002\001\255\255\004\001\005\001\006\001\
\255\255\255\255\255\255\010\001\052\001\053\001\054\001\014\001\
\255\255\255\255\255\255\001\001\255\255\003\001\021\001\022\001\
\255\255\007\001\008\001\255\255\255\255\255\255\255\255\030\001\
\001\001\032\001\003\001\255\255\035\001\255\255\007\001\008\001\
\255\255\040\001\024\001\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\255\255\023\001\024\001\
\055\001\056\001\057\001\058\001\002\001\255\255\004\001\005\001\
\006\001\255\255\255\255\255\255\010\001\016\000\017\000\255\255\
\014\001\255\255\021\000\255\255\255\255\255\255\255\255\021\001\
\022\001\255\255\255\255\255\255\031\000\255\255\255\255\255\255\
\030\001\255\255\032\001\038\000\255\255\035\001\255\255\255\255\
\255\255\255\255\040\001\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\255\255\255\255\
\255\255\055\001\056\001\057\001\058\001\002\001\255\255\004\001\
\255\255\006\001\255\255\255\255\255\255\010\001\255\255\255\255\
\255\255\014\001\255\255\255\255\009\001\010\001\011\001\012\001\
\021\001\022\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\030\001\023\001\032\001\025\001\026\001\035\001\028\001\
\029\001\255\255\255\255\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\255\255\255\255\055\001\056\001\057\001\058\001\002\001\255\255\
\255\255\255\255\006\001\255\255\255\255\001\001\010\001\003\001\
\255\255\255\255\014\001\007\001\008\001\009\001\010\001\255\255\
\255\255\021\001\022\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\255\255\
\028\001\029\001\255\255\255\255\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\001\001\255\255\255\255\055\001\056\001\057\001\058\001\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\001\001\023\001\024\001\
\025\001\026\001\255\255\028\001\029\001\009\001\010\001\011\001\
\012\001\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\255\255\
\028\001\029\001\001\001\255\255\003\001\255\255\255\255\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\255\255\028\001\029\001\001\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\255\255\028\001\029\001\001\001\255\255\003\001\255\255\
\255\255\255\255\007\001\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\255\255\028\001\
\029\001\001\001\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\003\001\028\001\029\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\003\001\028\001\029\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\003\001\028\001\029\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\001\001\255\255\
\003\001\255\255\255\255\255\255\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\255\255\
\003\001\031\001\255\255\255\255\007\001\008\001\036\001\037\001\
\038\001\039\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\052\001\053\001\
\054\001\007\001\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\255\255\028\001\029\001\
\007\001\255\255\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\255\255\028\001\029\001\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\255\255\028\001\029\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\255\255\025\001\026\001\255\255\028\001\
\029\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\009\001\010\001\011\001\
\012\001\025\001\026\001\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\255\255\
\028\001\029\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  APPLY\000\
  MATAPP\000\
  TRANS\000\
  EMULT\000\
  EDIV\000\
  RETURN\000\
  VOID\000\
  IF\000\
  ELSE\000\
  ELSEIF\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  STRING\000\
  NULL\000\
  NEW\000\
  FUNC\000\
  CENTER\000\
  NORTH\000\
  SOUTH\000\
  WEST\000\
  EAST\000\
  NWEST\000\
  NEAST\000\
  SWEST\000\
  SEAST\000\
  IMG\000\
  MAT\000\
  FMAT\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  ID\000\
  STRLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 47 "parser.mly"
              ( _1 )
# 553 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                       ( [])
# 559 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 51 "parser.mly"
                       ( _2 :: _1 )
# 567 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 55 "parser.mly"
    ( { typ = _1; fname = _2; formals = _4;
      locals = List.rev _7; body = List.rev _8 } )
# 579 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                  ( [] )
# 585 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 60 "parser.mly"
                  ( List.rev _1 )
# 592 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
                             ( [(_1,_2)] )
# 600 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
                             ( (_3,_4) :: _1 )
# 609 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
        ( Int )
# 615 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
         ( Bool )
# 621 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
          ( Float )
# 627 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
           ( String )
# 633 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
         ( Void )
# 639 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 72 "parser.mly"
                                                                    ( Mat(_3, _6, _9) )
# 648 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 73 "parser.mly"
                                                                     ( FMat(_3, _6, _9) )
# 657 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
        ( Img )
# 663 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
                     ( [] )
# 669 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 78 "parser.mly"
                     ( _2 :: _1 )
# 677 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 81 "parser.mly"
              ( (_1, _2) )
# 685 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                   ( [] )
# 691 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                   ( _2 :: _1 )
# 699 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
              ( Expr _1 )
# 706 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                ( Return Noexpr )
# 712 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                     ( Return _2 )
# 719 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 91 "parser.mly"
                            ( Block(List.rev _2) )
# 726 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 734 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                                            ( If(_3, _5, _7) )
# 743 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 94 "parser.mly"
                                  ( While(_3, _5) )
# 751 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 97 "parser.mly"
                     ( IntLit(_1) )
# 758 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 98 "parser.mly"
                     ( FloatLit(_1) )
# 765 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                     ( BoolLit(true) )
# 771 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                     ( BoolLit(false) )
# 777 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
                     ( Id(_1) )
# 784 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                     ( Null )
# 790 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
                     ( StrLit(_1) )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                     ( Id("#C") )
# 803 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                     ( Id("#E") )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                     ( Id("#W") )
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
                     ( Id("#N") )
# 821 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
                     ( Id("#S") )
# 827 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
                     ( Id("#NW") )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
                     ( Id("#NE") )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                     ( Id("#SW") )
# 845 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                     ( Id("#SE") )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 859 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 867 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 875 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 883 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 891 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 899 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 907 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 915 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 923 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 931 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 939 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 947 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                     ( Binop(_1, Apply, _3) )
# 955 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Binop(_1, Matapp, _3) )
# 963 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                     ( Binop(_1, Emult,  _3) )
# 971 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                     ( Binop(_1, Ediv,   _3) )
# 979 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                         ( Unop(Neg, _2) )
# 986 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                     ( Unop(Not, _2) )
# 993 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                     ( Assign(_1, _3) )
# 1001 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 132 "parser.mly"
                                 ( Call(_1, _3) )
# 1009 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                       ( _2 )
# 1016 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mat_lit) in
    Obj.repr(
# 134 "parser.mly"
                                              ( MatrixLit(List.rev _2) )
# 1023 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                                                          ( MatrixAccess(_1, _3, _6) )
# 1032 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                                    ( [] )
# 1038 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 143 "parser.mly"
                                    ( List.rev _1 )
# 1045 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                                    ( [_1] )
# 1052 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                                    ( _3 :: _1 )
# 1060 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 150 "parser.mly"
                                    ( IntLit(_1) )
# 1067 "parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 151 "parser.mly"
                                    ( FloatLit(_1) )
# 1074 "parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 152 "parser.mly"
               ( Id(_1) )
# 1081 "parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit_list) in
    Obj.repr(
# 155 "parser.mly"
                                    ( [_1] )
# 1088 "parser.ml"
               : 'mat_lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mat_lit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lit_list) in
    Obj.repr(
# 156 "parser.mly"
                                    ( _3 :: _1 )
# 1096 "parser.ml"
               : 'mat_lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit) in
    Obj.repr(
# 159 "parser.mly"
                                    ( [_1] )
# 1103 "parser.ml"
               : 'lit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lit_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lit) in
    Obj.repr(
# 160 "parser.mly"
                                    ( _1 @ [_3] )
# 1111 "parser.ml"
               : 'lit_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)

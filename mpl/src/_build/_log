### Starting build.
# Target: mpl.ml.depends, tags: { extension:ml, file:mpl.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules mpl.ml > mpl.ml.depends
# Target: codegen.ml.depends, tags: { extension:ml, file:codegen.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules codegen.ml > codegen.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules ast.ml > ast.ml.depends
# Target: exceptions.ml.depends, tags: { extension:ml, file:exceptions.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules exceptions.ml > exceptions.ml.depends
# Target: sast.ml.depends, tags: { extension:ml, file:sast.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules sast.ml > sast.ml.depends
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlc -c -w -a-4-27 -package llvm.analysis -package llvm -o ast.cmo ast.ml
# Target: semant.ml.depends, tags: { extension:ml, file:semant.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules semant.ml > semant.ml.depends
# Target: sast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlc -c -w -a-4-27 -package llvm.analysis -package llvm -o sast.cmo sast.ml
# Target: exceptions.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:exceptions.cmo, file:exceptions.ml, implem, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlc -c -w -a-4-27 -package llvm.analysis -package llvm -o exceptions.cmo exceptions.ml
# Target: semant.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlc -c -w -a-4-27 -package llvm.analysis -package llvm -o semant.cmo semant.ml
# Target: parser.mly, tags: { extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, package(llvm), package(llvm.analysis), parser, quiet }
/usr/bin/ocamlyacc parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules parser.mli > parser.mli.depends
# Target: scanner.mll, tags: { extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, package(llvm), package(llvm.analysis), quiet }
/usr/bin/ocamllex -q scanner.mll
# Target: scanner.ml.depends, tags: { extension:ml, file:scanner.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules scanner.ml > scanner.ml.depends
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlc -c -w -a-4-27 -package llvm.analysis -package llvm -o parser.cmi parser.mli
# Target: codegen.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlc -c -w -a-4-27 -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
# Target: scanner.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlc -c -w -a-4-27 -package llvm.analysis -package llvm -o scanner.cmo scanner.ml
# Target: mpl.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:mpl.cmo, file:mpl.ml, implem, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlc -c -w -a-4-27 -package llvm.analysis -package llvm -o mpl.cmo mpl.ml
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlopt -c -w -a-4-27 -package llvm.analysis -package llvm -o ast.cmx ast.ml
# Target: sast.cmx, tags: { compile, extension:cmx, extension:ml, file:sast.cmx, file:sast.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlopt -c -w -a-4-27 -package llvm.analysis -package llvm -o sast.cmx sast.ml
# Target: exceptions.cmx, tags: { compile, extension:cmx, extension:ml, file:exceptions.cmx, file:exceptions.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlopt -c -w -a-4-27 -package llvm.analysis -package llvm -o exceptions.cmx exceptions.ml
# Target: semant.cmx, tags: { compile, extension:cmx, extension:ml, file:semant.cmx, file:semant.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlopt -c -w -a-4-27 -package llvm.analysis -package llvm -o semant.cmx semant.ml
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlopt -c -w -a-4-27 -package llvm.analysis -package llvm -o parser.cmx parser.ml
# Target: codegen.cmx, tags: { compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlopt -c -w -a-4-27 -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
# Target: scanner.cmx, tags: { compile, extension:cmx, extension:ml, file:scanner.cmx, file:scanner.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlopt -c -w -a-4-27 -package llvm.analysis -package llvm -o scanner.cmx scanner.ml
# Target: mpl.cmx, tags: { compile, extension:cmx, extension:ml, file:mpl.cmx, file:mpl.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), quiet }
ocamlfind ocamlopt -c -w -a-4-27 -package llvm.analysis -package llvm -o mpl.cmx mpl.ml
# Target: mpl.native, tags: { dont_link_with, extension:native, file:mpl.native, link, native, ocaml, package(llvm), package(llvm.analysis), program, quiet }
ocamlfind ocamlopt -linkpkg -package llvm.analysis -package llvm ast.cmx exceptions.cmx sast.cmx semant.cmx codegen.cmx parser.cmx scanner.cmx mpl.cmx -o mpl.native
# Compilation successful.
